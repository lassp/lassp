<style>
<!--

#map-canvas {
  height: 400px;
}

#map-canvas img {
  max-width: none;
}

#map-canvas label {
  width: auto; display:inline;
}

-->
</style>

<div class="row-fluid">
    <div class="span12" id="map-canvas"></div>
</div>

<div class="row-fluid">

    <div class="span4">
        <h2><?php echo $this->translate('The LASSP Vision') ?></h2>
        <p><?php echo $this->translate('The Solar System is a grand place, wider than we can imagine, very much an empty place.'); ?></p>
        <p><?php echo $this->translate('If the
sun were the size of the Griffith Observatory Planetarium Dome, the earth would be little
bigger than a soccer ball, more than a mile away. The moon would be the size of a baseball 23 feet from
the earth. The nearest star would be 100,000 miles above the Indian Ocean.'); ?></p>
        <p><?php echo $this->translate('Whether you grew up
with Flash Gordon, James T. Kirk, or Darth Vader, no one is zooming from planet to planet on
a day-to-day basis. Visit our sculptural interpretation of the planets around southern California
to experience the size and scope of the solar system.'); ?></p>
        <blockquote>Jack Anderson<br>Project Designer</blockquote>
    </div>

    <div class="span4">
        <h2><?php echo $this->translate('The Model') ?></h2>
        <dl>
            <dt>The Sun</dt>
                <dd>The scale of the project is determined by the size of the planetarium dome. At 83 feet, it is 55 million times smaller than the sun.</dd>
            <dt>The Terrestrial Planets</dt>
                <dd>Planets orbit the Sun on an elliptical path. The circles represent the aphelion (furthest) and perihelion (closest) points a planet
travels on its way around the Sun. The apparent size of the planetarium dome will match the apparent size of the sun from any
point on the blue circle (Earth's orbit).</dd>
            <dt>The Gas Giants</dt>
                <dd>The Sun represents 99% of the mass of the solar system. The Gas Giants have 99% of the remaining mass consisting mostly of
basic elements hydrogen, helium, carbon and oxygen. Their large size let us explore spherical structures.</dd>
            <dt>The Dwarf Planets and Asteroids</dt>
                <dd>Thousands of objects orbit the Sun. Many, including Pluto, are resonant with the orbit of Neptune. The twenty-nine largest can be placed around Southern California. One could be as far as St. Louis. Proxima Centuri, the nearest star, in the
model would be almost halfway to the moon.</dd>
        </dl>
   </div>

   <div class="span4">
       <h2><?php echo $this->translate('Get Involved') ?></h2>
       <p><?php echo $this->translate('The Solar System Project will provide a connection between art and science, a connection between
our city and our sun, a connection between our world and ourselves, and a connection between
the cultural and educational institutions of Los Angeles.'); ?></p>
        <p><?php echo $this->translate('Host locations from Hollywood to Mt.
Wilson and from Santa Catalina Island to Pasadena will host a planet or an asteroid.'); ?></p>
        <p><?php echo $this->translate('Visitors to
these locations will connect with our city and the region in a new way. A visit to one location will
inspire curiosity about others. Avid astronomy fans will be compelled to visit every site. School
children on a field trip will see their place in the city in a new light and enjoy a new perspective for
their place in the universe. They will connect one with the next and connect with each other.'); ?></p>

       <h2><?php echo $this->translate('Contact') ?></h2>
       <p><?php echo $this->translate('Email us for more information about sponsorship or becoming a host location:') ?></p>
       <p><a class="btn btn-success" href="mailto:info@lassp.org" target="_blank">info@lassp.org</a></p>
   </div>
</div>


<script type="text/javascript"
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBFJ8V1qydk_HtNbvdlkK2yAkYf5GXNhTI&sensor=false">
</script>
<script type="text/javascript">

  var planetOptions = {};
  var bounds;
  var map;
  var planetDonut;
  var center = new google.maps.LatLng(34.11811,-118.300313);

  google.maps.event.addDomListener(window, 'load', initialize);

  planetOptions['mercury'] = {
    minMiles: .52,
    maxMiles: .79,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#FF0000",
    fillOpacity: 0.35
  };
  planetOptions['venus'] = {
    minMiles: 1.21,
    maxMiles: 1.23,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#00FF00",
    fillOpacity: 0.35
  };
  planetOptions['earth'] = {
    minMiles: 1.66,
    maxMiles: 1.71,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#005CFF",
    fillOpacity: 0.35
  }
  planetOptions['mars'] = {
    minMiles: 2.33,
    maxMiles: 2.81,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#FF0000",
    fillOpacity: 0.35
  }
  planetOptions['asteroids'] = {
    minMiles: 2.99,
    maxMiles: 6.51,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#A2A2A3",
    fillOpacity: 0.25
  }
  planetOptions['jupiter'] = {
    minMiles: 8.35,
    maxMiles: 9.20,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#F96806",
    fillOpacity: 0.35
  }
  planetOptions['saturn'] = {
    minMiles: 15.21,
    maxMiles: 16.95,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#FF00FF",
    fillOpacity: 0.35
  }
  planetOptions['uranus'] = {
    minMiles: 30.90,
    maxMiles: 33.85,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#00FF67",
    fillOpacity: 0.35
  }
  planetOptions['neptune'] = {
    minMiles: 50.09,
    maxMiles: 51.23,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#0000FF",
    fillOpacity: 0.35
  }
  planetOptions['pluto'] = {
    minMiles: 50.00,
    maxMiles: 83.13,
    strokeColor: "#0000FF",
    strokeOpacity: 0.8,
    strokeWeight: 0,
    fillColor: "#00FFF8",
    fillOpacity: 0.20
  }


  function initialize() {
    var mapOptions = {
      center: new google.maps.LatLng(34.11811,-118.300313),
      zoom: 20,
//       mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeId: google.maps.MapTypeId.HYBRID,
      tilt: 0
    };

    map = new google.maps.Map(document.getElementById("map-canvas"),mapOptions);

    bounds = new google.maps.LatLngBounds();

    for (var planet in planetOptions) {
      // Construct the circle for each value in planetOptions.
      var donutOptions = {
        paths: [drawCircle(center, planetOptions[planet].maxMiles, -1),
                drawCircle(center, planetOptions[planet].minMiles, 1)],
        strokeColor: planetOptions[planet].strokeColor,
        strokeOpacity: planetOptions[planet].strokeOpacity,
        strokeWeight: planetOptions[planet].strokeWeight,
        fillColor: planetOptions[planet].fillColor,
        fillOpacity: planetOptions[planet].fillOpacity
      };

      planetDonut = new google.maps.Polygon(donutOptions);

      planetDonut.setMap(map);

    }

     var imageBounds = new google.maps.LatLngBounds(
         new google.maps.LatLng(34.117975,-118.300488), // lower left
         new google.maps.LatLng(34.118235,-118.300179)  // upper right
     );

    var sunIcon = new google.maps.GroundOverlay(
        "/img/sun-icon.png",
        imageBounds);

    sunIcon.setMap(map);

    //map.fitBounds(bounds);

    map.setZoom(20)
    setTimeout("map.setZoom(18)", 5000)
    setTimeout("map.setZoom(13)", 8000)
    setTimeout("map.setZoom(8)", 11000)

  }

  function drawCircle(point, radius, dir) {
    var d2r = Math.PI / 180;   // degrees to radians
    var r2d = 180 / Math.PI;   // radians to degrees
    var earthsradius = 3963;   // 3963 is the radius of the earth in miles

     var points = 32;

     // find the raidus in lat/lon
     var rlat = (radius / earthsradius) * r2d;
     var rlng = rlat / Math.cos(point.lat() * d2r);


     var extp = new Array();
     if (dir==1)  {
      var start=0;var end=points+1 // one extra here makes sure we connect the
     } else {
      var start=points+1;var end=0
     }

     for (var i=start; (dir==1 ? i < end : i > end); i=i+dir)
     {
        var theta = Math.PI * (i / (points/2));
        ey = point.lng() + (rlng * Math.cos(theta)); // center a + radius x * cos(theta)
        ex = point.lat() + (rlat * Math.sin(theta)); // center b + radius y * sin(theta)
        extp.push(new google.maps.LatLng(ex, ey));
        bounds.extend(extp[extp.length-1]);
     }
     // alert(extp.length);
     return extp;
   }

</script>
